{
  "stats": {
    "suites": 17,
    "tests": 115,
    "passes": 114,
    "pending": 0,
    "failures": 1,
    "start": "2020-06-08T12:17:33.520Z",
    "end": "2020-06-08T12:18:12.720Z",
    "duration": 39200,
    "testsRegistered": 115,
    "passPercent": 99.1,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c92ff25c-92cc-43c4-91a6-d26033103187",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "56bd7816-fe42-44c1-9fe0-2124eee23c7d",
        "title": "Cluster",
        "fullFile": "/wazuh-api/test/test_cluster.js",
        "file": "/test/test_cluster.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "599fbc7d-561a-4e10-a8d2-f40e9ed2f705",
            "title": "GET/cluster/nodes",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request",
                "fullTitle": "Cluster GET/cluster/nodes Request",
                "timedOut": false,
                "duration": 295,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9c574fa1-8432-41d5-95e4-60c7cbc46e40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Pagination",
                "fullTitle": "Cluster GET/cluster/nodes Pagination",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?offset=0&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.items.should.be.instanceof(Array).and.have.lengthOf(1);\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c3385cd-1c87-477c-a032-a5cbe8c1164d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Retrieve all elements with limit=0",
                "fullTitle": "Cluster GET/cluster/nodes Retrieve all elements with limit=0",
                "timedOut": false,
                "duration": 287,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/nodes?limit=0\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(1406);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "34afb7a3-121f-4062-9918-c4e60dad944f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sort",
                "fullTitle": "Cluster GET/cluster/nodes Sort",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?sort=-name\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8c41ca2d-04d1-48d5-b9bf-8defca853fe5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Search",
                "fullTitle": "Cluster GET/cluster/nodes Search",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?search=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76e06c48-77ef-4626-9773-cdc1edb82f72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Select",
                "fullTitle": "Cluster GET/cluster/nodes Select",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?select=name,version\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items[0].should.have.properties(['name', 'version']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9cf4efaf-3dc2-4bd6-a9bf-733e6783cf69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Select 2",
                "fullTitle": "Cluster GET/cluster/nodes Select 2",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?select=type\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items[0].should.have.properties(['type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5832064d-94aa-445a-9aa6-e8594a1d45da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wrong select",
                "fullTitle": "Cluster GET/cluster/nodes Wrong select",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?select=wrong_field\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'message']);\n        res.body.error.should.equal(1724);\n        res.body.message.should.be.instanceof(String)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "28c8f7f3-0840-4a07-b58b-5f409df8f685",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: type",
                "fullTitle": "Cluster GET/cluster/nodes Filters: type",
                "timedOut": false,
                "duration": 275,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?type=master\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.totalItems.should.be.above(0);\n        res.body.data.items.should.be.instanceof(Array)\n        res.body.data.items.should.be.instanceof(Array).and.have.lengthOf(1);\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        res.body.data.items[0].type.should.be.equal('master');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1c78759-5447-4bf6-9c9f-b2fb648ea4a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: query 1",
                "fullTitle": "Cluster GET/cluster/nodes Filters: query 1",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?q=name~worker&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array).and.have.lengthOf(1);\n        res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n        res.body.data.items[0].type.should.be.equal('worker');\n        res.body.data.totalItems.should.equal(2)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "314982c1-dc7c-43e1-b4ab-6f3093b5d7af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: query 2",
                "fullTitle": "Cluster GET/cluster/nodes Filters: query 2",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\nrequest(common.url)\n.get(\"/cluster/nodes?q=name=worker-1\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\", /json/)\n.expect(200)\n.end(function (err, res) {\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.have.properties(['items', 'totalItems']);\n    res.body.data.items.should.be.instanceof(Array).and.have.lengthOf(1);\n    res.body.data.items[0].should.have.properties(['name', 'ip', 'version', 'type']);\n    res.body.data.items[0].type.should.be.equal('worker');\n    res.body.data.items[0].name.should.be.equal('worker-1');\n    res.body.data.totalItems.should.equal(1)\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7b6b1b1a-4ba3-4d7e-b5af-5f6c437c1853",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: invalid type",
                "fullTitle": "Cluster GET/cluster/nodes Filters: invalid type",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes?type=wrong_type\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'message']);\n        res.body.error.should.equal(1728);\n        res.body.message.should.be.instanceof(String)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aee15016-fc8b-4fa9-bcda-5648133263f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c574fa1-8432-41d5-95e4-60c7cbc46e40",
              "7c3385cd-1c87-477c-a032-a5cbe8c1164d",
              "34afb7a3-121f-4062-9918-c4e60dad944f",
              "8c41ca2d-04d1-48d5-b9bf-8defca853fe5",
              "76e06c48-77ef-4626-9773-cdc1edb82f72",
              "9cf4efaf-3dc2-4bd6-a9bf-733e6783cf69",
              "5832064d-94aa-445a-9aa6-e8594a1d45da",
              "28c8f7f3-0840-4a07-b58b-5f409df8f685",
              "c1c78759-5447-4bf6-9c9f-b2fb648ea4a4",
              "314982c1-dc7c-43e1-b4ab-6f3093b5d7af",
              "7b6b1b1a-4ba3-4d7e-b5af-5f6c437c1853",
              "aee15016-fc8b-4fa9-bcda-5648133263f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3376,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "8f8c049a-c7c0-4545-87f6-6861e8fc71bb",
            "title": "GET/cluster/:node_id/stats",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/stats \"before all\" hook",
                "timedOut": false,
                "duration": 281,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes/\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expected_name = res.body.data.items[0].name;\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "53918e26-c0ea-4bdc-982b-eae4ce105fb3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Cluster stats",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Cluster stats",
                "timedOut": false,
                "duration": 292,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/\" + expected_name + \"/stats\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        done();\n    });",
                "err": {
                  "message": "AssertionError: expected Object { error: 1308, message: 'Stats file has not been created yet' } to have property data",
                  "estack": "AssertionError: expected Object { error: 1308, message: 'Stats file has not been created yet' } to have property data\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value [as properties] (node_modules/should/cjs/should.js:335:19)\n    at Test.<anonymous> (test/test_cluster.js:285:42)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /wazuh-api/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /wazuh-api/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at endReadableNT (_stream_readable.js:1221:12)\n    at processTicksAndRejections (internal/process/task_queues.js:84:21)"
                },
                "isRoot": false,
                "uuid": "8355e72e-fa4a-45ec-8e9e-b36dd7bba5d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Unexisting node stats",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Unexisting node stats",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/unexisting_node/stats\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'message']);\n        res.body.error.should.equal(3022);\n        res.body.message.should.be.instanceof(String)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "15505ef1-0883-402e-af77-b05fc3582258",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Analysisd stats (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Analysisd stats (master)",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/stats/analysisd\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['archives_queue_size', 'events_dropped',\n                                              'rule_matching_queue_usage', 'alerts_queue_size',\n                                              'event_queue_usage', 'events_edps', 'hostinfo_events_decoded',\n                                              'syscollector_events_decoded', 'rootcheck_edps', 'events_processed',\n                                              'firewall_queue_usage', 'alerts_queue_usage', 'firewall_queue_size',\n                                              'alerts_written', 'firewall_written', 'syscheck_queue_size',\n                                              'events_received', 'rootcheck_queue_usage', 'rootcheck_events_decoded',\n                                              'rootcheck_queue_size', 'syscheck_edps', 'fts_written',\n                                              'syscheck_queue_usage', 'other_events_edps', 'statistical_queue_usage',\n                                              'hostinfo_edps', 'hostinfo_queue_usage', 'syscheck_events_decoded',\n                                              'syscollector_queue_usage', 'archives_queue_usage', 'statistical_queue_size',\n                                              'total_events_decoded', 'hostinfo_queue_size', 'syscollector_queue_size',\n                                              'rule_matching_queue_size', 'other_events_decoded', 'event_queue_size',\n                                              'syscollector_edps']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c0ab1604-4bb9-470e-aa3d-6368ecb87890",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Analysisd stats (worker-1)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Analysisd stats (worker-1)",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/stats/analysisd\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['archives_queue_size', 'events_dropped',\n                                              'rule_matching_queue_usage', 'alerts_queue_size',\n                                              'event_queue_usage', 'events_edps', 'hostinfo_events_decoded',\n                                              'syscollector_events_decoded', 'rootcheck_edps', 'events_processed',\n                                              'firewall_queue_usage', 'alerts_queue_usage', 'firewall_queue_size',\n                                              'alerts_written', 'firewall_written', 'syscheck_queue_size',\n                                              'events_received', 'rootcheck_queue_usage', 'rootcheck_events_decoded',\n                                              'rootcheck_queue_size', 'syscheck_edps', 'fts_written',\n                                              'syscheck_queue_usage', 'other_events_edps', 'statistical_queue_usage',\n                                              'hostinfo_edps', 'hostinfo_queue_usage', 'syscheck_events_decoded',\n                                              'syscollector_queue_usage', 'archives_queue_usage', 'statistical_queue_size',\n                                              'total_events_decoded', 'hostinfo_queue_size', 'syscollector_queue_size',\n                                              'rule_matching_queue_size', 'other_events_decoded', 'event_queue_size',\n                                              'syscollector_edps']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "93512dad-39e4-43e4-abbb-83bd024c2c5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Analysisd stats (worker-2)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Analysisd stats (worker-2)",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-2/stats/analysisd\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['archives_queue_size', 'events_dropped',\n                                              'rule_matching_queue_usage', 'alerts_queue_size',\n                                              'event_queue_usage', 'events_edps', 'hostinfo_events_decoded',\n                                              'syscollector_events_decoded', 'rootcheck_edps', 'events_processed',\n                                              'firewall_queue_usage', 'alerts_queue_usage', 'firewall_queue_size',\n                                              'alerts_written', 'firewall_written', 'syscheck_queue_size',\n                                              'events_received', 'rootcheck_queue_usage', 'rootcheck_events_decoded',\n                                              'rootcheck_queue_size', 'syscheck_edps', 'fts_written',\n                                              'syscheck_queue_usage', 'other_events_edps', 'statistical_queue_usage',\n                                              'hostinfo_edps', 'hostinfo_queue_usage', 'syscheck_events_decoded',\n                                              'syscollector_queue_usage', 'archives_queue_usage', 'statistical_queue_size',\n                                              'total_events_decoded', 'hostinfo_queue_size', 'syscollector_queue_size',\n                                              'rule_matching_queue_size', 'other_events_decoded', 'event_queue_size',\n                                              'syscollector_edps']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e5353a2a-88bb-4abb-a57e-5cfc73658858",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Remoted stats (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Remoted stats (master)",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/stats/remoted\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        \n        res.body.data.should.have.properties(['discarded_count', 'msg_sent', 'queue_size',\n                                              'ctrl_msg_count', 'evt_count', 'tcp_sessions',\n                                              'total_queue_size']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7bec9841-f603-495a-82dd-336bed0e4a2c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Remoted stats (worker-1)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Remoted stats (worker-1)",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/stats/remoted\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['discarded_count', 'msg_sent', 'queue_size',\n                                              'ctrl_msg_count', 'evt_count', 'tcp_sessions',\n                                              'total_queue_size']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8035d531-2084-4fa7-8ce6-5a42bcb70a5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Remoted stats (worker-2)",
                "fullTitle": "Cluster GET/cluster/:node_id/stats Remoted stats (worker-2)",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-2/stats/remoted\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['discarded_count', 'msg_sent', 'queue_size',\n                                              'ctrl_msg_count', 'evt_count', 'tcp_sessions',\n                                              'total_queue_size']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cc3252af-6114-4fa3-8eeb-2c76bc011d68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "15505ef1-0883-402e-af77-b05fc3582258",
              "c0ab1604-4bb9-470e-aa3d-6368ecb87890",
              "93512dad-39e4-43e4-abbb-83bd024c2c5a",
              "e5353a2a-88bb-4abb-a57e-5cfc73658858",
              "7bec9841-f603-495a-82dd-336bed0e4a2c",
              "8035d531-2084-4fa7-8ce6-5a42bcb70a5c",
              "cc3252af-6114-4fa3-8eeb-2c76bc011d68"
            ],
            "failures": [
              "8355e72e-fa4a-45ec-8e9e-b36dd7bba5d8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2228,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a25de27f-27d7-4502-ad85-e82aa41e3a25",
            "title": "GET/cluster/:node_id/logs",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Request (master)",
                "timedOut": false,
                "duration": 326,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3220bae8-95e8-456b-8f00-c6bb69f2417d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request (worker-1)",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Request (worker-1)",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/logs\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "35ca0b64-afc4-4ca9-bbdc-0df0a1200045",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request (worker-2)",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Request (worker-2)",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-2/logs\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c76a3e83-8805-46b4-806f-adb60c3146ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Pagination",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Pagination",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?offset=1&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e0a35fe7-6b3b-4879-8048-7bf2d6f830a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sort",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Sort",
                "timedOut": false,
                "duration": 315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?sort=timestamp\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2354d459-38f2-4db4-a366-40388e046c3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Search",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Search",
                "timedOut": false,
                "duration": 324,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?search=analysisd&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].tag.should.be.equal('ossec-analysisd');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c4323752-1f28-4630-a4f0-bcad5558c7bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: type_log",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: type_log",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?type_log=info&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].level.should.be.equal('info');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76829b13-f443-4ac4-8158-aa3c5aa3e393",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: category",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: category",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?category=ossec-execd&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].tag.should.be.equal('ossec-execd');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ae8292db-aa6e-4fb4-8410-39e058c5b7d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: query 1",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: query 1",
                "timedOut": false,
                "duration": 334,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?q=tag=ossec-analysisd;level=info&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].tag.should.be.equal('ossec-analysisd');\n        res.body.data.items[0].level.should.be.equal('info');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "684b861f-7413-43f6-93b9-dbbb2ac4680f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: query 2",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: query 2",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?q=tag=ossec-analysisd;level=info&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].tag.should.be.equal('ossec-analysisd');\n        res.body.data.items[0].level.should.be.equal('info');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4269610a-fb94-490f-be89-bdd87aa1c10c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: query 3",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: query 3",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?q=tag~ossec;level=info&limit=1\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['items', 'totalItems']);\n        res.body.data.items.should.be.instanceof(Array);\n        res.body.data.totalItems.should.be.instanceof(Number);\n        res.body.data.items[0].should.have.properties(['timestamp', 'tag', 'level', 'description']);\n        res.body.data.items[0].tag.should.startWith('ossec');\n        res.body.data.items[0].level.should.be.equal('info');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "938d0811-fbf0-4529-8c26-be4f209b3376",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filters: wrong query",
                "fullTitle": "Cluster GET/cluster/:node_id/logs Filters: wrong query",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/logs?q=ossec\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(400)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'message']);\n        res.body.error.should.equal(622);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7a52acf8-145d-4bee-a573-9c96b38cc8c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3220bae8-95e8-456b-8f00-c6bb69f2417d",
              "35ca0b64-afc4-4ca9-bbdc-0df0a1200045",
              "c76a3e83-8805-46b4-806f-adb60c3146ad",
              "e0a35fe7-6b3b-4879-8048-7bf2d6f830a0",
              "2354d459-38f2-4db4-a366-40388e046c3e",
              "c4323752-1f28-4630-a4f0-bcad5558c7bb",
              "76829b13-f443-4ac4-8158-aa3c5aa3e393",
              "ae8292db-aa6e-4fb4-8410-39e058c5b7d6",
              "684b861f-7413-43f6-93b9-dbbb2ac4680f",
              "4269610a-fb94-490f-be89-bdd87aa1c10c",
              "938d0811-fbf0-4529-8c26-be4f209b3376",
              "7a52acf8-145d-4bee-a573-9c96b38cc8c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3574,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "23934a8d-e0dd-40fa-8295-e6318042c630",
            "title": "GET/cluster/nodes/:node_name",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/nodes/:node_name \"before all\" hook",
                "timedOut": false,
                "duration": 270,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes/\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expected_name = res.body.data.items[0].name;\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a236e5dd-7de4-4920-bc6d-736703b805c3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request",
                "fullTitle": "Cluster GET/cluster/nodes/:node_name Request",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes/\" + expected_name)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['name', 'ip', 'version', 'type']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6b356411-7bbe-4f69-a158-351189f47c42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request wrong name",
                "fullTitle": "Cluster GET/cluster/nodes/:node_name Request wrong name",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes/wrong_name\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'message']);\n        res.body.error.should.equal(1730);\n        res.body.message.should.be.instanceof(String)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7ec237e-b3b1-415d-9ca7-5d2a5373b1e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6b356411-7bbe-4f69-a158-351189f47c42",
              "e7ec237e-b3b1-415d-9ca7-5d2a5373b1e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 556,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2432e338-5494-45e3-8b31-932615d8d117",
            "title": "GET/cluster/status",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request",
                "fullTitle": "Cluster GET/cluster/status Request",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/status\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['running', 'enabled']);\n        res.body.data.running.should.be.instanceof(String);\n        res.body.data.enabled.should.be.instanceof(String);\n        res.body.data.running.should.be.equal(\"yes\");\n        res.body.data.enabled.should.be.equal(\"yes\");\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1da06737-80c8-4f71-b10e-d1145bd77521",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1da06737-80c8-4f71-b10e-d1145bd77521"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "efb46bca-fe54-41b2-9ab6-a8f334e4ee80",
            "title": "GET/cluster/config",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request",
                "fullTitle": "Cluster GET/cluster/config Request",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/config\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['disabled', 'hidden', 'name', 'node_name', 'bind_addr', 'node_type', 'key', 'nodes', 'port']);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "69b3a5a9-1135-4145-8647-dd8b48d0889b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69b3a5a9-1135-4145-8647-dd8b48d0889b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 263,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2574a051-d0f9-49b8-93aa-2d6a79c1cae3",
            "title": "GET/cluster/healthcheck",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/healthcheck \"before all\" hook",
                "timedOut": false,
                "duration": 287,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/nodes/\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        expected_name_master = res.body.data.items[0].name;\n        expected_name_worker = res.body.data.items[1].name;\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "275b3f6b-03a9-4ea8-93f4-d07fa4c44252",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request",
                "fullTitle": "Cluster GET/cluster/healthcheck Request",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/healthcheck\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['nodes', 'n_connected_nodes']);\n        res.body.data.n_connected_nodes.should.be.above(0)\n        res.body.data.nodes.should.have.properties([expected_name_worker, expected_name_master]);\n        // master\n        res.body.data.nodes[expected_name_master].should.have.properties(['info']);\n        res.body.data.nodes[expected_name_master].info.should.have.properties(['ip', 'version', 'type', 'name', 'n_active_agents']);\n        res.body.data.nodes[expected_name_master].info.n_active_agents.should.be.instanceof(Number)\n        res.body.data.nodes[expected_name_master].info.name.should.be.equal(expected_name_master);\n        res.body.data.nodes[expected_name_master].info.type.should.be.equal('master');\n\n        // worker\n        res.body.data.nodes[expected_name_worker].should.have.properties(['info', 'status']);\n        res.body.data.nodes[expected_name_worker].info.should.have.properties(['ip', 'version', 'type', 'name', 'n_active_agents']);\n        res.body.data.nodes[expected_name_worker].info.n_active_agents.should.be.instanceof(Number)\n        res.body.data.nodes[expected_name_worker].info.name.should.be.equal(expected_name_worker);\n        res.body.data.nodes[expected_name_worker].info.type.should.be.equal('worker');\n        res.body.data.nodes[expected_name_worker].status.should.have.properties(['last_sync_agentinfo', 'sync_integrity_free', 'last_sync_agentgroups', 'last_sync_integrity', 'sync_agentinfo_free', 'sync_extravalid_free']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentinfo.should.have.properties(['date_start_master', 'date_end_master', 'total_agentinfo']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentinfo.total_agentinfo.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.sync_integrity_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentgroups.should.have.properties(['date_end_master', 'date_start_master', 'total_agentgroups']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentgroups.total_agentgroups.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.sync_agentinfo_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.sync_extravalid_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.should.have.properties(['total_files', 'date_end_master', 'date_start_master']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.should.have.properties(['shared', 'missing', 'extra_valid', 'extra']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.shared.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.missing.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.extra_valid.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.extra.should.be.instanceof(Number);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bf5b751a-a322-4471-ab1d-c528be268acf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Filter: node name",
                "fullTitle": "Cluster GET/cluster/healthcheck Filter: node name",
                "timedOut": false,
                "duration": 577,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/healthcheck?node=\" + expected_name_worker)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['nodes', 'n_connected_nodes']);\n        res.body.data.n_connected_nodes.should.be.above(0)\n        res.body.data.nodes.should.have.properties([expected_name_worker]);\n\n        // worker\n        res.body.data.nodes[expected_name_worker].should.have.properties(['info', 'status']);\n        res.body.data.nodes[expected_name_worker].info.should.have.properties(['ip', 'version', 'type', 'name', 'n_active_agents']);\n        res.body.data.nodes[expected_name_worker].info.n_active_agents.should.be.instanceof(Number)\n        res.body.data.nodes[expected_name_worker].info.name.should.be.equal(expected_name_worker);\n        res.body.data.nodes[expected_name_worker].info.type.should.be.equal('worker');\n        res.body.data.nodes[expected_name_worker].status.should.have.properties(['last_sync_agentinfo', 'sync_integrity_free', 'last_sync_agentgroups', 'last_sync_integrity', 'sync_agentinfo_free', 'sync_extravalid_free']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentinfo.should.have.properties(['date_start_master', 'date_end_master', 'total_agentinfo']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentinfo.total_agentinfo.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.sync_integrity_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentgroups.should.have.properties(['date_end_master', 'date_start_master', 'total_agentgroups']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_agentgroups.total_agentgroups.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.sync_agentinfo_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.sync_extravalid_free.should.be.instanceof(Boolean);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.should.have.properties(['total_files', 'date_end_master', 'date_start_master']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.should.have.properties(['shared', 'missing', 'extra_valid', 'extra']);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.shared.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.missing.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.extra_valid.should.be.instanceof(Number);\n        res.body.data.nodes[expected_name_worker].status.last_sync_integrity.total_files.extra.should.be.instanceof(Number);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f85ea842-2f22-414f-83af-ab9631ff8eab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bf5b751a-a322-4471-ab1d-c528be268acf",
              "f85ea842-2f22-414f-83af-ab9631ff8eab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 874,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "ad744ad7-5c2f-49df-911b-5f68cd1e474b",
            "title": "POST/cluster/:node_id/files",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster POST/cluster/:node_id/files \"before all\" hook",
                "timedOut": false,
                "duration": 708,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/files?path=\" + path_ossec_conf)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        ossec_conf_content_master = res.body.data\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "80b84dfa-13b0-4371-aa99-3459ff7f975b",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster POST/cluster/:node_id/files \"before all\" hook",
                "timedOut": false,
                "duration": 694,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/files?path=\" + path_ossec_conf)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        ossec_conf_content_worker = res.body.data\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d894f402-e424-46fe-afa0-b2f45cb241f5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Upload ossec.conf (master)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload ossec.conf (master)",
                "timedOut": false,
                "duration": 660,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_master)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "91a0465a-0448-4dab-abbd-e248c36598a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload ossec.conf (worker)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload ossec.conf (worker)",
                "timedOut": false,
                "duration": 393,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_worker)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e0a05d05-b4bc-4444-b14b-3792532a3c8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload new rules",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload new rules",
                "timedOut": false,
                "duration": 316,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_rules + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- Local rules -->\\n  <!-- Modify it at your will. -->\\n  <!-- Example -->\\n  <group name=\\\"local,\\\">\\n    <!--   NEW RULE    -->\\n    <rule id=\\\"111111\\\" level=\\\"5\\\">\\n      <if_sid>5716</if_sid>\\n      <srcip>1.1.1.1</srcip>\\n      <description>sshd: authentication failed from IP 1.1.1.1.</description>\\n      <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>\\n    </rule>\\n  </group>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "56cf95f1-f7b6-4b30-8f5d-fe2084bda3b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload rules (overwrite=true)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload rules (overwrite=true)",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_rules + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- Local rules -->\\n  <!-- Modify it at your will. -->\\n  <!-- Example -->\\n  <group name=\\\"local,\\\">\\n    <!--   NEW RULE    -->\\n    <rule id=\\\"111111\\\" level=\\\"5\\\">\\n      <if_sid>5716</if_sid>\\n      <srcip>1.1.1.1</srcip>\\n      <description>sshd: authentication failed from IP 1.1.1.1.</description>\\n      <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>\\n    </rule>\\n  </group>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c3add7f4-d498-4e10-8488-f00629c0e568",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload rules (overwrite=false)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload rules (overwrite=false)",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_rules + \"&overwrite=false\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- Local rules -->\\n  <!-- Modify it at your will. -->\\n  <!-- Example -->\\n  <group name=\\\"local,\\\">\\n    <!--   NEW RULE    -->\\n    <rule id=\\\"111111\\\" level=\\\"5\\\">\\n      <if_sid>5716</if_sid>\\n      <srcip>1.1.1.1</srcip>\\n      <description>sshd: authentication failed from IP 1.1.1.1.</description>\\n      <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>\\n    </rule>\\n  </group>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(1905);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3c482455-9207-48e3-a24f-affa77640807",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload new decoder",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload new decoder",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_decoders + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- NEW Local Decoders -->\\n  <!-- Modify it at your will. -->\\n  <decoder name=\\\"local_decoder_example\\\">\\n    <program_name>NEW DECODER</program_name>\\n  </decoder>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "46f2ea34-5f2d-4829-8989-ed96da74c2a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload decoder (overwrite=true)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload decoder (overwrite=true)",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_decoders + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- NEW Local Decoders -->\\n  <!-- Modify it at your will. -->\\n  <decoder name=\\\"local_decoder_example\\\">\\n    <program_name>NEW DECODER</program_name>\\n  </decoder>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f4c771a1-93f6-4d6a-9b3f-1ee8113054b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload decoder (without overwrite parameter)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload decoder (without overwrite parameter)",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_decoders)\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- NEW Local Decoders -->\\n  <!-- Modify it at your will. -->\\n  <decoder name=\\\"local_decoder_example\\\">\\n    <program_name>NEW DECODER</program_name>\\n  </decoder>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(1905);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ee2a6a52-91fa-4828-beba-4c4d0c52f650",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload new list",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload new list",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_lists + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\"test-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9623cf7b-6172-4b97-87cd-ce7f9755823f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload list (overwrite=true)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload list (overwrite=true)",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_lists + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\"test-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a7ee0f04-078e-408b-8f4c-0b2721dbb661",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload list (overwrite=false)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload list (overwrite=false)",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_lists + \"&overwrite=false\")\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\"test-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(1905);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "482ad722-0f91-4852-a03b-46852dbf357f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload corrupted ossec.conf (master)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload corrupted ossec.conf (master)",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output><<<<yes</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(703);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "60147005-88b3-4ef5-b45a-fcb4ded4e66d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload corrupted ossec.conf (worker)",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload corrupted ossec.conf (worker)",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output><<<<yes</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(703);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a221b8a1-671c-4e14-add8-e02eea4ba443",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload malformed rules",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload malformed rules",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_rules + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--   NEW RULE    -->\\n    <rule id=\\\"100001111\\\" level=\\\"5\\\">\\n      <if_sid>5716</if_sid>\\n      <srcip>1.1.1.1</srcip>\\n      <description>sshd: authentication failed from IP 1.1.1.1.</description>\\n      <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>\\n    </rule>\\n  </group>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(703);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cf1cdce4-7d8a-4ae8-8638-c41eaefb55aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload rules to unexisting node",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload rules to unexisting node",
                "timedOut": false,
                "duration": 304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/TESTNODE001/files?path=\" + path_rules)\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- Local rules -->\\n  <!-- Modify it at your will. -->\\n  <!-- Example -->\\n  <group name=\\\"local,\\\">\\n    <!--   NEW RULE    -->\\n    <rule id=\\\"100001111\\\" level=\\\"5\\\">\\n      <if_sid>5716</if_sid>\\n      <srcip>1.1.1.1</srcip>\\n      <description>sshd: authentication failed from IP 1.1.1.1.</description>\\n      <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>\\n    </rule>\\n  </group>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(3022);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "042d09c8-bf65-46e1-af3f-ebdb530beb82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload malformed decoder",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload malformed decoder",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_decoders + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- NEW Local Decoders -->\\n  <!-- Modify it at your will. -->\\n  <decoder name=\\\"local_decoder_example\\\">\\n    <program_name>NEW <DECODER</program_name>\\n  </decoder>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(703);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a7051972-a419-41c7-ad56-3723ba35a1ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload decoder to unexisting node",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload decoder to unexisting node",
                "timedOut": false,
                "duration": 287,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/TESTNODE001/files?path=\" + path_decoders)\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!-- NEW Local Decoders -->\\n  <!-- Modify it at your will. -->\\n  <decoder name=\\\"local_decoder_example\\\">\\n    <program_name>NEW DECODER</program_name>\\n  </decoder>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(3022);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "17a4fb7a-9a17-4a16-9031-78ba34694140",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload malformed list",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload malformed list",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_lists + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\":write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(705);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "59f34f38-8bdf-4a48-85d0-fd7d8ced4db8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload list to unexisting node",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload list to unexisting node",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/TESTNODE001/files?path=\" + path_lists)\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\"test-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(3022);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "954f8050-7d3a-43fb-af82-ff80aead7d1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload list with empty path",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload list with empty path",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files\")\n.set(\"Content-Type\", \"application/octet-stream\")\n.send(\"test&%-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(706);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f9f262a7-78f9-430b-b889-192858dec733",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Upload a file with a wrong content type",
                "fullTitle": "Cluster POST/cluster/:node_id/files Upload a file with a wrong content type",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=etc/lists/new-list\")\n.set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n.send(\"test&%-wazuh-w:write\\ntest-wazuh-r:read\\ntest-wazuh-a:attribute\\ntest-wazuh-x:execute\\ntest-wazuh-c:command\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(804);\n    res.body.message.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a6328a5d-8248-4815-b3c5-49e35a7fa639",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91a0465a-0448-4dab-abbd-e248c36598a1",
              "e0a05d05-b4bc-4444-b14b-3792532a3c8e",
              "56cf95f1-f7b6-4b30-8f5d-fe2084bda3b3",
              "c3add7f4-d498-4e10-8488-f00629c0e568",
              "3c482455-9207-48e3-a24f-affa77640807",
              "46f2ea34-5f2d-4829-8989-ed96da74c2a0",
              "f4c771a1-93f6-4d6a-9b3f-1ee8113054b1",
              "ee2a6a52-91fa-4828-beba-4c4d0c52f650",
              "9623cf7b-6172-4b97-87cd-ce7f9755823f",
              "a7ee0f04-078e-408b-8f4c-0b2721dbb661",
              "482ad722-0f91-4852-a03b-46852dbf357f",
              "60147005-88b3-4ef5-b45a-fcb4ded4e66d",
              "a221b8a1-671c-4e14-add8-e02eea4ba443",
              "cf1cdce4-7d8a-4ae8-8638-c41eaefb55aa",
              "042d09c8-bf65-46e1-af3f-ebdb530beb82",
              "a7051972-a419-41c7-ad56-3723ba35a1ad",
              "17a4fb7a-9a17-4a16-9031-78ba34694140",
              "59f34f38-8bdf-4a48-85d0-fd7d8ced4db8",
              "954f8050-7d3a-43fb-af82-ff80aead7d1c",
              "f9f262a7-78f9-430b-b889-192858dec733",
              "a6328a5d-8248-4815-b3c5-49e35a7fa639"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4984,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2bfa7e76-002d-4c91-8fae-810509100f16",
            "title": "GET/cluster/:node_id/files",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request ossec.conf (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request ossec.conf (master)",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/files?path=\" + path_ossec_conf)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        res.body.data.should.equal(ossec_conf_content_master)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa1099bd-66de-4548-a786-c24d992f0d27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request ossec.conf (worker)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request ossec.conf (worker)",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/files?path=\" + path_ossec_conf)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        res.body.data.should.equal(ossec_conf_content_worker)\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d13b7f6c-8153-4f12-a5da-63a0fcbb7f3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request rules (local)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request rules (local)",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/files?path=\" + path_rules)\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c797a75-dde4-47c4-92a8-d1ff4c57b008",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request rules (global)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request rules (global)",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/files?path=ruleset/rules/0095-sshd_rules.xml\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.be.an.string;\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9958cb34-d0ae-4d11-aa8b-d4d56cff743e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request decoders (local)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request decoders (local)",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=\" + path_decoders)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e9e976a5-93b7-428c-9aa8-a1419fac6693",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request decoders (global)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request decoders (global)",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=ruleset/decoders/0025-apache_decoders.xml\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c8660aa7-5054-4533-b3ae-51291aaf0673",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request lists",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request lists",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=\" + path_lists)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "11f1650a-6626-4ce7-b34d-b33e212c502d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request wrong path 1",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request wrong path 1",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=etc/internal_options.conf\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(704);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f3879411-dfb7-4270-b604-bdf80fdde998",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request wrong path 2",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request wrong path 2",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=../tmp\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(704);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "73d2a71b-1c6d-42bf-86f2-9cc0d3a21382",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request wrong path 3",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request wrong path 3",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=./framework/wazuh/agent.py\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(704);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d8082af9-076c-40e3-b4b9-1b13de9e6f63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request unexisting file",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request unexisting file",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=etc/rules/wrong_file.xml\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(1005);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "221f0fb8-961a-4ec2-8f4a-27b851b4d489",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request file from unexisting node",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request file from unexisting node",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/TESTNODE001/files?path=etc/rules/test_rules.xml\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(3022);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5a8dc754-0636-4be9-a81a-be8a65ea62c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request file with empty path",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request file with empty path",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(706);\n    res.body.message.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6e4acafe-2068-4c86-97f1-b49f3fa2cbe3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request file with validation parameter (true)",
                "fullTitle": "Cluster GET/cluster/:node_id/files Request file with validation parameter (true)",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/files?path=\" + path_lists + \"&validation=true\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4f8a6999-c11f-495a-aa5c-972a42dc87a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aa1099bd-66de-4548-a786-c24d992f0d27",
              "d13b7f6c-8153-4f12-a5da-63a0fcbb7f3a",
              "7c797a75-dde4-47c4-92a8-d1ff4c57b008",
              "9958cb34-d0ae-4d11-aa8b-d4d56cff743e",
              "e9e976a5-93b7-428c-9aa8-a1419fac6693",
              "c8660aa7-5054-4533-b3ae-51291aaf0673",
              "11f1650a-6626-4ce7-b34d-b33e212c502d",
              "f3879411-dfb7-4270-b604-bdf80fdde998",
              "73d2a71b-1c6d-42bf-86f2-9cc0d3a21382",
              "d8082af9-076c-40e3-b4b9-1b13de9e6f63",
              "221f0fb8-961a-4ec2-8f4a-27b851b4d489",
              "5a8dc754-0636-4be9-a81a-be8a65ea62c2",
              "6e4acafe-2068-4c86-97f1-b49f3fa2cbe3",
              "4f8a6999-c11f-495a-aa5c-972a42dc87a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3039,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "132e2f76-eabf-4d24-8898-70f93c41b0d2",
            "title": "GET/cluster/:node_id/configuration/validation (manager and worker OK)",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request validation (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker OK) Request validation (master)",
                "timedOut": false,
                "duration": 754,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status']);\n        res.body.data.status.should.equal('OK');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e34f586e-82ac-48cc-94b4-c29e19bc10c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (worker)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker OK) Request validation (worker)",
                "timedOut": false,
                "duration": 765,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status']);\n        res.body.data.status.should.equal('OK');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c09fe45c-eab3-4389-9d1f-1870497ab49e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (all nodes)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker OK) Request validation (all nodes)",
                "timedOut": false,
                "duration": 842,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status']);\n        res.body.data.status.should.equal('OK');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f89ef2d-e489-4469-ab4e-12eab31496d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e34f586e-82ac-48cc-94b4-c29e19bc10c5",
              "c09fe45c-eab3-4389-9d1f-1870497ab49e",
              "9f89ef2d-e489-4469-ab4e-12eab31496d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2e51a0f4-0248-4e0c-955c-d28f0d55bd78",
            "title": "GET/cluster/:node_id/configuration/validation (manager KO, worker OK)",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager KO, worker OK) \"before all\" hook",
                "timedOut": false,
                "duration": 280,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output>WRONG_VALUE</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n <cluster>\\n      <name>wazuh</name>\\n      <node_name>master</node_name>\\n      <node_type>master</node_type>\\n      <key>XXXX</key>\\n      <port>1516</port>\\n      <bind_addr>192.168.122.111</bind_addr>\\n      <nodes>\\n        <node>192.168.122.111</node>\\n      </nodes>\\n      <hidden>no</hidden>\\n      <disabled>no</disabled>\\n    </cluster>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ff4359fa-bc65-4644-ab8b-306cb6c17fc1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager KO, worker OK) \"after all\" hook",
                "timedOut": false,
                "duration": 277,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_master)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "09ef356f-1d50-4ce2-b9d9-5e3aa1e89bf3",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Request validation (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager KO, worker OK) Request validation (master)",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d2030e60-590a-47c9-bffa-81704005245c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (worker)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager KO, worker OK) Request validation (worker)",
                "timedOut": false,
                "duration": 764,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status']);\n        res.body.data.status.should.equal('OK');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a20d45b-f64b-4c65-8bcd-23aa87361a75",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (all nodes)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager KO, worker OK) Request validation (all nodes)",
                "timedOut": false,
                "duration": 796,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "67d06736-2426-43c0-8939-5929fdeb4387",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2030e60-590a-47c9-bffa-81704005245c",
              "8a20d45b-f64b-4c65-8bcd-23aa87361a75",
              "67d06736-2426-43c0-8939-5929fdeb4387"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1833,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "dfcbf65a-6f19-466a-8ae9-70f8d5a46f5c",
            "title": "GET/cluster/:node_id/configuration/validation (manager OK, worker KO)",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager OK, worker KO) \"before all\" hook",
                "timedOut": false,
                "duration": 287,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output>WRONG_VALUE</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "666c2cc7-a487-4290-8302-90bad674fb04",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager OK, worker KO) \"after all\" hook",
                "timedOut": false,
                "duration": 305,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_worker)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "61a76517-1111-4b11-8e86-cead6f3eea94",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Request validation (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager OK, worker KO) Request validation (master)",
                "timedOut": false,
                "duration": 773,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/master/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status']);\n        res.body.data.status.should.equal('OK');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6205f59-893f-406c-8b32-679a61a50632",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (worker)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager OK, worker KO) Request validation (worker)",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c06e0eda-d075-4bfc-bc9a-aff89f1577b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (all nodes)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager OK, worker KO) Request validation (all nodes)",
                "timedOut": false,
                "duration": 918,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a31660cd-c422-42d2-b152-54b4644a23fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f6205f59-893f-406c-8b32-679a61a50632",
              "c06e0eda-d075-4bfc-bc9a-aff89f1577b8",
              "a31660cd-c422-42d2-b152-54b4644a23fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1969,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "5520f557-9650-445a-92f8-b2718fa2580b",
            "title": "GET/cluster/:node_id/configuration/validation (manager and worker KO)",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) \"before all\" hook",
                "timedOut": false,
                "duration": 275,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output>WRONG_VALUE</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n <cluster>\\n      <name>wazuh</name>\\n      <node_name>master</node_name>\\n      <node_type>master</node_type>\\n      <key>XXXXX</key>\\n      <port>1516</port>\\n      <bind_addr>192.168.122.111</bind_addr>\\n      <nodes>\\n        <node>192.168.122.111</node>\\n      </nodes>\\n      <hidden>no</hidden>\\n      <disabled>no</disabled>\\n    </cluster>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "41538f3a-35c6-48bb-ba13-1d7c6d3591c7",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) \"before all\" hook",
                "timedOut": false,
                "duration": 293,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(\"<!--  Wazuh - Manager -->\\n  <ossec_config>\\n    <global>\\n      <jsonout_output>WRONG_VALUE</jsonout_output>\\n      <alerts_log>yes</alerts_log>\\n      <logall>no</logall>\\n      <logall_json>no</logall_json>\\n      <email_notification>no</email_notification>\\n      <smtp_server>smtp.example.wazuh.com</smtp_server>\\n      <email_from>ossecm@example.wazuh.com</email_from>\\n      <email_to>recipient@example.wazuh.com</email_to>\\n      <email_maxperhour>12</email_maxperhour>\\n      <email_log_source>alerts.log</email_log_source>\\n      <queue_size>131072</queue_size>\\n    </global>\\n  </ossec_config>\\n\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6565bc47-c19d-45ff-9a82-a553f093c2e4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) \"after all\" hook",
                "timedOut": false,
                "duration": 318,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/master/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_master)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e8e90760-9354-4dc2-af18-a7b8b69f891f",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after all\" hook",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) \"after all\" hook",
                "timedOut": false,
                "duration": 310,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.post(\"/cluster/worker-1/files?path=\" + path_ossec_conf + \"&overwrite=true\")\n.set(\"Content-Type\", \"application/xml\")\n.send(ossec_conf_content_worker)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err, res) {\n    if (err) throw err;\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8af1b857-bc98-4824-8aa0-b584a94ca5b0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Request validation (master)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) Request validation (master)",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "797ea1c2-89fb-4ca2-80b5-2de1f9cd768d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (worker)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) Request validation (worker)",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/worker-1/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8d294b85-ae03-4b93-9ebb-7afc9a3842b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request validation (all nodes)",
                "fullTitle": "Cluster GET/cluster/:node_id/configuration/validation (manager and worker KO) Request validation (all nodes)",
                "timedOut": false,
                "duration": 301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n    .get(\"/cluster/configuration/validation\")\n    .auth(common.credentials.user, common.credentials.password)\n    .expect(\"Content-type\", /json/)\n    .expect(200)\n    .end(function (err, res) {\n        if (err) return done(err);\n        res.body.should.have.properties(['error', 'data']);\n        res.body.error.should.equal(0);\n        res.body.data.should.have.properties(['status', 'details']);\n        res.body.data.status.should.equal('KO');\n        res.body.data.details.should.be.instanceof(Array);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f78c94e4-9c10-4fa2-8ae3-3d5bfa80789f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "797ea1c2-89fb-4ca2-80b5-2de1f9cd768d",
              "8d294b85-ae03-4b93-9ebb-7afc9a3842b6",
              "f78c94e4-9c10-4fa2-8ae3-3d5bfa80789f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 862,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "0a9c2dea-2cbf-4a0e-aa06-a4cdddae8b75",
            "title": "DELETE/cluster/:node_id/files",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Delete rules (master)",
                "fullTitle": "Cluster DELETE/cluster/:node_id/files Delete rules (master)",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.delete(\"/cluster/master/files?path=\" + path_rules)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0f06c6d4-a31e-4a8f-a36c-5e964f927a73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Delete decoders (master)",
                "fullTitle": "Cluster DELETE/cluster/:node_id/files Delete decoders (master)",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.delete(\"/cluster/master/files?path=\" + path_decoders)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d5f63942-f0be-4fb4-b0b9-4198abb05d55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Delete CDB list (master)",
                "fullTitle": "Cluster DELETE/cluster/:node_id/files Delete CDB list (master)",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.delete(\"/cluster/master/files?path=\" + path_lists)\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "38a94627-af1e-4ca8-995c-c1f971c62870",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Delete file with empty path",
                "fullTitle": "Cluster DELETE/cluster/:node_id/files Delete file with empty path",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.delete(\"/cluster/master/files\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(400)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'message']);\n    res.body.error.should.equal(706);\n    res.body.message.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "27a5297c-21f2-4403-9bbf-726e6962fe5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0f06c6d4-a31e-4a8f-a36c-5e964f927a73",
              "d5f63942-f0be-4fb4-b0b9-4198abb05d55",
              "38a94627-af1e-4ca8-995c-c1f971c62870",
              "27a5297c-21f2-4403-9bbf-726e6962fe5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 907,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "c85608bd-64aa-41c7-ab06-1270e38d74d1",
            "title": "GET/cluster/master/config/:component/:configuration",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request-Agentless-Agentless",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Agentless-Agentless",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/agentless/agentless\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('agentless'); // returns an array\n    res.body.data.agentless[0].should.have.properties(['state', 'host',\n    'frequency', 'arguments', 'type', 'port']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "79718b93-f351-47fb-8ce3-220e1c3884d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Analysis-Global",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Analysis-Global",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/analysis/global\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['global']);\n    res.body.data.global.should.have.properties(['email_notification', 'max_output_size',\n    'alerts_log', 'zeromq_output', 'host_information', 'jsonout_output', 'rotate_interval',\n    'rootkit_detection', 'integrity_checking', 'memory_size', 'logall', 'prelude_output',\n    'stats', 'white_list', 'logall_json']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9d409920-8ea8-4417-b339-38ea6c8cc6ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Analysis-Active-response",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Analysis-Active-response",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/analysis/active_response\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    // res.body.data.should.have.properties(['active_response']); // empty list\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e52d7200-8edb-48f3-9ea2-9c2af063da01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Analysis-Alerts",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Analysis-Alerts",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/analysis/alerts\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['alerts']);\n    res.body.data.alerts.should.have.properties(['email_alert_level', 'log_alert_level']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3d3edf8c-f4cf-4f59-96a1-14f00108fa7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Analysis-Command",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Analysis-Command",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/analysis/command\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('command');\n    res.body.data.command[0].should.have.properties(['executable', 'timeout_allowed',\n    'name', 'expect']);\n    res.body.data.command[1].should.have.properties(['executable', 'timeout_allowed',\n    'name']);\n    res.body.data.command[2].should.have.properties(['executable', 'timeout_allowed',\n    'name', 'expect']);\n    res.body.data.command[3].should.have.properties(['executable', 'timeout_allowed',\n    'name', 'expect']);\n    res.body.data.command[4].should.have.properties(['executable', 'timeout_allowed',\n    'name', 'expect']);\n    res.body.data.command[5].should.have.properties(['executable', 'timeout_allowed',\n    'name', 'expect']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8f56b258-aac7-4e39-9a75-1baa4cb8a805",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Analysis-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Analysis-Internal",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/analysis/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('internal');\n    res.body.data.internal.should.have.properties(['analysisd']);\n    res.body.data.internal.analysisd.should.have.properties(['label_cache_maxage',\n    'stats_percent_diff', 'show_hidden_labels', 'decoder_order_size',\n    'min_rotate_interval', 'stats_mindiff', 'log_fw', 'rlimit_nofile', 'fts_list_size',\n    'debug', 'fts_min_size_for_str', 'default_timeframe', 'stats_maxdiff']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "efb6ce4c-7788-4af7-a04c-d7af19968508",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Auth-Auth",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Auth-Auth",
                "timedOut": false,
                "duration": 308,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/auth/auth\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('auth');\n    res.body.data.auth.should.have.properties(['purge', 'ssl_auto_negotiate', 'ciphers',\n    'force_insert', 'ssl_verify_host', 'limit_maxagents', 'force_time',\n    'ssl_manager_key', 'disabled', 'ssl_manager_cert', 'use_source_ip',\n    'use_password', 'port']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f0dbe9dd-1c89-4e35-8eb2-99dbe0af6086",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Com-Active-response",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Com-Active-response",
                "timedOut": false,
                "duration": 289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/com/active-response\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['active-response']);\n    res.body.data['active-response'].should.have.properties(['disabled', 'ca_verification']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "67e30097-472b-4a26-8b8f-12c46e768cfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Com-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Com-Internal",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/com/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['internal']);\n    res.body.data.internal.should.have.properties(['execd']);\n    res.body.data.internal.execd.should.have.properties(['request_timeout', 'max_restart_lock']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe5c23c5-1767-4a82-9479-5928bd4e4908",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Csyslog-Csyslog",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Csyslog-Csyslog",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/csyslog/csyslog\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['syslog_output']);\n    res.body.data['syslog_output'][0].should.have.properties(['format',\n    'level', 'use_fqdn', 'port', 'server']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "27e91057-a390-41c3-b87a-22bc0fe88b66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Integrator-Integration",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Integrator-Integration",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/integrator/integration\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('integration');\n    res.body.data.integration[0].should.have.properties(['alert_format', 'hook_url',\n    'group', 'name', 'level']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "45745be6-333e-4ec8-a71c-9dffc1544e31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Logcollector-Localfile",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Logcollector-Localfile",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/logcollector/localfile\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('localfile');\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4678857e-0572-4d7a-9c08-138c607404fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Logcollector-Socket",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Logcollector-Socket",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/logcollector/socket\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    // res.body.should.have.properties(['error', 'data']); // data property is empty\n    // res.body.data.should.have.properties(['socket']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "03f335d7-fe4f-45ea-a67e-cd9667f43415",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Logcollector-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Logcollector-Internal",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/logcollector/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('internal');\n    res.body.data.internal.should.have.properties('logcollector');\n\t\t\t\tres.body.data.internal.logcollector.should.have.properties(['open_attempts', 'input_threads',\n    'vcheck_files', 'max_files', 'sock_fail_time', 'queue_size', 'max_lines', 'remote_commands',\n    'loop_timeout', 'debug', 'open_attempts']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "39b4feeb-35f6-4b43-a174-b4a9f7b75a60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Mail-Global",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Mail-Global",
                "timedOut": false,
                "duration": 308,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/mail/global\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('global');\n    res.body.data.global.should.have.properties(['email_maxperhour', 'email_to',\n    'email_from', 'smtp_server']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a8a85bd1-59dc-43db-a1a9-6b146f24798a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Mail-Alerts",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Mail-Alerts",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/mail/alerts\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    // res.body.should.have.properties(['error', 'data']); // data property is empty\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1a53a0e-f50e-4f47-b009-a4fef677014c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Mail-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Mail-Internal",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/mail/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('internal');\n    res.body.data.internal.should.have.properties('mail');\n    res.body.data.internal.mail.should.have.properties(['strict_checking',\n    'grouping']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "409ce179-eb0e-4704-a19e-baea2d7d355c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Monitor-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Monitor-Internal",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/monitor/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('monitord');\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f5ee33f7-a54f-4b13-8223-360abf4a0549",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Request-Remote",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Request-Remote",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/request/remote\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('remote');\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe373394-b737-4702-8ee1-52e0f3c3c36a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Request-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Request-Internal",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/worker-1/config/request/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties('internal');\n    res.body.data.internal.should.have.properties('remoted');\n    res.body.data.internal.remoted.should.have.properties(['request_timeout', 'pass_empty_keyfile',\n    'recv_timeout', 'request_rto_sec', 'request_rto_msec', 'response_timeout', 'sender_pool', 'recv_counter_flush',\n    'request_pool', 'comp_average_printout', 'shared_reload', 'merge_shared', 'rlimit_nofile',\n    'verify_msg_id', 'max_attempts']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cac6605a-fe85-47c7-875c-fa6d0aa2f980",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Syscheck-Syscheck",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Syscheck-Syscheck",
                "timedOut": false,
                "duration": 301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/syscheck/syscheck\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['syscheck']);\n    res.body.data.syscheck.should.have.properties(['ignore', 'skip_nfs', 'directories',\n    'scan_on_start', 'disabled', 'frequency', 'whodata', 'nodiff']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e154c01a-6b06-4479-90f0-deba96eb4828",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Syscheck-Rootcheck",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Syscheck-Rootcheck",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/syscheck/rootcheck\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['rootcheck']);\n    res.body.data.rootcheck.should.have.properties(['check_unixaudit', 'check_sys', 'rootkit_trojans',\n    'skip_nfs', 'check_if', 'check_pids', 'check_dev', 'check_ports', 'disabled', 'rootkit_files',\n    // 'frequency', 'scanall', 'check_trojans', 'base_directory', 'check_files', 'system_audit']); // base directory value is empty, this cause an error, system_audit is optional\n    'frequency', 'scanall', 'check_trojans', 'check_files']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f275d6ee-a0ef-43a1-8488-8e37469ea47a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Syscheck-Internal",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Syscheck-Internal",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/syscheck/internal\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['internal']);\n    res.body.data.internal.should.have.properties(['syscheck', 'rootcheck']);\n    res.body.error.should.equal(0);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "15520676-4b74-4204-b1c1-b1f6ddab7f94",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request-Wmodules-Wmodules",
                "fullTitle": "Cluster GET/cluster/master/config/:component/:configuration Request-Wmodules-Wmodules",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.get(\"/cluster/master/config/wmodules/wmodules\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.data.should.have.properties(['wmodules']);\n    res.body.error.should.equal(0);\n    // get the name of the modules\n    var modules = []\n    for (i in res.body.data.wmodules) {\n        modules.push(Object.keys(res.body.data.wmodules[i])[0])\n    }\n    // list of modules which should be present in the request\n    module_list = ['cis-cat', 'database', 'open-scap', 'osquery', 'sca', 'syscollector', 'vulnerability-detector', 'wazuh_control', 'wazuh_download']\n    // check modules\n    should((JSON.stringify(module_list.sort()))).be.eql(JSON.stringify(modules.sort()))\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "97d869f5-c149-4203-b3d6-8fead91c144e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79718b93-f351-47fb-8ce3-220e1c3884d6",
              "9d409920-8ea8-4417-b339-38ea6c8cc6ad",
              "e52d7200-8edb-48f3-9ea2-9c2af063da01",
              "3d3edf8c-f4cf-4f59-96a1-14f00108fa7f",
              "8f56b258-aac7-4e39-9a75-1baa4cb8a805",
              "efb6ce4c-7788-4af7-a04c-d7af19968508",
              "f0dbe9dd-1c89-4e35-8eb2-99dbe0af6086",
              "67e30097-472b-4a26-8b8f-12c46e768cfb",
              "fe5c23c5-1767-4a82-9479-5928bd4e4908",
              "27e91057-a390-41c3-b87a-22bc0fe88b66",
              "45745be6-333e-4ec8-a71c-9dffc1544e31",
              "4678857e-0572-4d7a-9c08-138c607404fc",
              "03f335d7-fe4f-45ea-a67e-cd9667f43415",
              "39b4feeb-35f6-4b43-a174-b4a9f7b75a60",
              "a8a85bd1-59dc-43db-a1a9-6b146f24798a",
              "c1a53a0e-f50e-4f47-b009-a4fef677014c",
              "409ce179-eb0e-4704-a19e-baea2d7d355c",
              "f5ee33f7-a54f-4b13-8223-360abf4a0549",
              "fe373394-b737-4702-8ee1-52e0f3c3c36a",
              "cac6605a-fe85-47c7-875c-fa6d0aa2f980",
              "e154c01a-6b06-4479-90f0-deba96eb4828",
              "f275d6ee-a0ef-43a1-8488-8e37469ea47a",
              "15520676-4b74-4204-b1c1-b1f6ddab7f94",
              "97d869f5-c149-4203-b3d6-8fead91c144e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6905,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "99249989-487c-42be-bacf-44d82bad6299",
            "title": "PUT/cluster/:node_id/restart",
            "fullFile": "/wazuh-api/test/test_cluster.js",
            "file": "/test/test_cluster.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Request (worker)",
                "fullTitle": "Cluster PUT/cluster/:node_id/restart Request (worker)",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.put(\"/cluster/worker-1/restart\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "636cdc6a-49a1-4ba1-bb40-3bfd87c4584c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Request (master)",
                "fullTitle": "Cluster PUT/cluster/:node_id/restart Request (master)",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(common.url)\n.put(\"/cluster/master/restart\")\n.auth(common.credentials.user, common.credentials.password)\n.expect(\"Content-type\",/json/)\n.expect(200)\n.end(function(err,res){\n    if (err) return done(err);\n    res.body.should.have.properties(['error', 'data']);\n    res.body.error.should.equal(0);\n    res.body.data.should.be.an.string;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9e66d4ea-fdd0-448f-9e54-8a7f724c2c1b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "636cdc6a-49a1-4ba1-bb40-3bfd87c4584c",
              "9e66d4ea-fdd0-448f-9e54-8a7f724c2c1b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 544,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2020
}